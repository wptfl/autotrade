import time
import pyupbit
import datetime

access = "xncxKB3we6bkKJxuM8aLXW0k9G1qvHYEHZo9IlUF"          # 본인 값으로 변경
secret = "lx06BiUG2qDLIBl9poGwvQBGQIdGMutxyiksrVHW"          # 본인 값으로 변경

# OHLCV (open, high, low, close, volume)로 당일 시가, 고가, 저가, 종가, 거래량에 대한 데이터
def get_target_price(ticker, k):
    """변동성 돌파 전략으로 매수 목표가 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=2)
    # df.iloc[0]['close'] 전날의 종가 << 오늘의 시가
    target_price = df.iloc[0]['close'] + (df.iloc[0]['high'] - df.iloc[0]['low']) * k
    return target_price

def get_start_time(ticker):
    """시작 시간 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=1)
    start_time = df.index[0]
    return start_time

def get_balance(ticker):
    """잔고 조회"""
    balances = upbit.get_balances()
    for b in balances:
        if b['currency'] == ticker:
            if b['balance'] is not None:
                return float(b['balance'])
            else:
                return 0

def get_current_price(ticker):
    """현재가 조회"""
    return pyupbit.get_orderbook(tickers=ticker)[0]["orderbook_units"][0]["ask_price"]

# 로그인
upbit = pyupbit.Upbit(access, secret)
print("autotrade start")

flag = 0
sell_price = 0

# 자동매매 시작
while True:
    try:
        now = datetime.datetime.now()
        start_time = get_start_time("KRW-ETC")   # 9:00
        end_time = start_time + datetime.timedelta(days=1) # 9:00 + 1일

        # 9:00 < 현재 < 8:59:50
        if start_time < now < end_time - datetime.timedelta(seconds=10):
            target_price = get_target_price("KRW-ETC", 0.5)
            current_price = get_current_price("KRW-ETC")
            if ((target_price < current_price) & (flag == 0) ):
                krw = get_balance("KRW")
                if (krw > 5000 & flag ==0):
                    upbit.buy_market_order("KRW-ETC", 0.5*krw)
                    flag = 1

                elif (flag == 1 & (current_price > (target_price*1.5) ) ):
                    if btc > 0.00008:
                        upbit.sell_market_order("KRW-ETC", btc*0.9995)
                        sell_price = current_price    
                        flag = 2 

                elif (flag == 2):
                    time.sleep(3600)        

        # 변동성 전략 돌파 시 급락하는 지점에서의 전량 매도            
            elif target_price < (current_price * 0.95):
                btc = get_balance("ETC")
                if btc > 0.00008:
                    upbit.sell_market_order("KRW-ETC", btc*0.9995)
                    flag = 0

        else:
            btc = get_balance("BTC")
            if btc > 0.00008:
                upbit.sell_market_order("KRW-BTC", btc*0.9995)
                flag = 0
        time.sleep(1)
    except Exception as e:
        print(e)
        time.sleep(1)
